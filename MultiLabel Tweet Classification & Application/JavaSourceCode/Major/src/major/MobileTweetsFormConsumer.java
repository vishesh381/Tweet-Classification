package major; 

import java.io.BufferedOutputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import twitter4j.Query;
import twitter4j.QueryResult;
import twitter4j.Status;
import twitter4j.Twitter;
import twitter4j.TwitterException;
import twitter4j.TwitterFactory;
import twitter4j.conf.ConfigurationBuilder;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Pranav Jain
 */
public class MobileTweetsFormConsumer extends javax.swing.JFrame {
String brand1,brand2;
        float CameraPolarity1,ServiceAndSupportPolarity1,QuestPolarity1,OtherFeaturesPolarity1,MentionPolarity1;
        float CameraPolarity2,ServiceAndSupportPolarity2,QuestPolarity2,OtherFeaturesPolarity2,MentionPolarity2;

  int totalpos2=0,totalneg2=0,totalneu2=0;
    int totalpos1=0,totalneg1=0,totalneu1=0;
    /**
     * Creates new form Form
     */
    public MobileTweetsFormConsumer(String b1,String b2) {
        brand1=b1;
        brand2=b2;
        initComponents();
        //System.out.println(brand1);
        lblTrendingTweetsTopic2.setText(brand2);
        lblTrendingTweetsTopic1.setText(brand1);
        jTextField1.setText(brand1);
        jTextField2.setText(brand2);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnStreamTweets = new javax.swing.JButton();
        lblTrendingTweets1 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtTrendingTweets1 = new javax.swing.JTextArea();
        lblTrendingTweets2 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        txtTrendingTweets2 = new javax.swing.JTextArea();
        lblTrendingTweetsTopic2 = new javax.swing.JTextField();
        lblTrendingTweetsTopic1 = new javax.swing.JTextField();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        Pos1 = new javax.swing.JLabel();
        Neu1 = new javax.swing.JLabel();
        Neg1 = new javax.swing.JLabel();
        Mention1 = new javax.swing.JLabel();
        Features1 = new javax.swing.JLabel();
        Camera1 = new javax.swing.JLabel();
        OtherFeatures1 = new javax.swing.JLabel();
        Inquiry1 = new javax.swing.JLabel();
        Advertisement1 = new javax.swing.JLabel();
        MNeu1 = new javax.swing.JTextField();
        MPos1 = new javax.swing.JTextField();
        MNeg1 = new javax.swing.JTextField();
        OFNeu1 = new javax.swing.JTextField();
        OFNeg1 = new javax.swing.JTextField();
        OFPos1 = new javax.swing.JTextField();
        INeu1 = new javax.swing.JTextField();
        INeg1 = new javax.swing.JTextField();
        IPos1 = new javax.swing.JTextField();
        CPos1 = new javax.swing.JTextField();
        CNeu1 = new javax.swing.JTextField();
        CNeg1 = new javax.swing.JTextField();
        Ad1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        SSPos1 = new javax.swing.JTextField();
        ServiceSupport1 = new javax.swing.JLabel();
        SSNeu1 = new javax.swing.JTextField();
        SSNeg1 = new javax.swing.JTextField();
        Pos2 = new javax.swing.JLabel();
        Neu2 = new javax.swing.JLabel();
        Neg2 = new javax.swing.JLabel();
        Mention2 = new javax.swing.JLabel();
        MPos2 = new javax.swing.JTextField();
        MNeu2 = new javax.swing.JTextField();
        MNeg2 = new javax.swing.JTextField();
        CNeg2 = new javax.swing.JTextField();
        CNeu2 = new javax.swing.JTextField();
        CPos2 = new javax.swing.JTextField();
        Camera2 = new javax.swing.JLabel();
        Features2 = new javax.swing.JLabel();
        Performance6 = new javax.swing.JLabel();
        Performance2 = new javax.swing.JLabel();
        SSPos2 = new javax.swing.JTextField();
        OFPos2 = new javax.swing.JTextField();
        IPos2 = new javax.swing.JTextField();
        SSNeu2 = new javax.swing.JTextField();
        OFNeu2 = new javax.swing.JTextField();
        INeu2 = new javax.swing.JTextField();
        OFNeg2 = new javax.swing.JTextField();
        SSNeg2 = new javax.swing.JTextField();
        Ad2 = new javax.swing.JTextField();
        Advertisement2 = new javax.swing.JLabel();
        Inquiry2 = new javax.swing.JLabel();
        INeg2 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnStreamTweets.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnStreamTweets.setText("Stream Tweets");
        btnStreamTweets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStreamTweetsActionPerformed(evt);
            }
        });

        lblTrendingTweets1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblTrendingTweets1.setText("Trending Tweets:");

        txtTrendingTweets1.setEditable(false);
        txtTrendingTweets1.setColumns(20);
        txtTrendingTweets1.setRows(5);
        jScrollPane4.setViewportView(txtTrendingTweets1);

        lblTrendingTweets2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblTrendingTweets2.setText("Trending Tweets:");

        txtTrendingTweets2.setEditable(false);
        txtTrendingTweets2.setColumns(20);
        txtTrendingTweets2.setRows(5);
        jScrollPane8.setViewportView(txtTrendingTweets2);

        lblTrendingTweetsTopic2.setEditable(false);
        lblTrendingTweetsTopic2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lblTrendingTweetsTopic2ActionPerformed(evt);
            }
        });

        lblTrendingTweetsTopic1.setEditable(false);
        lblTrendingTweetsTopic1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lblTrendingTweetsTopic1ActionPerformed(evt);
            }
        });

        jTextField1.setEditable(false);
        jTextField1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTextField1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jTextField2.setEditable(false);
        jTextField2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTextField2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jLabel1.setText("Vs");

        Pos1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Pos1.setText("Positive");

        Neu1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Neu1.setText("Neutral");

        Neg1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Neg1.setText("Negative");

        Mention1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Mention1.setText("Mention");

        Features1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Features1.setText("Features");

        Camera1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Camera1.setText("Camera");

        OtherFeatures1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        OtherFeatures1.setText("Other Features");

        Inquiry1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Inquiry1.setText("Inquiry / Questions");

        Advertisement1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Advertisement1.setText("Advertisements");

        MNeu1.setEditable(false);

        MPos1.setEditable(false);
        MPos1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MPos1ActionPerformed(evt);
            }
        });

        MNeg1.setEditable(false);

        OFNeu1.setEditable(false);

        OFNeg1.setEditable(false);

        OFPos1.setEditable(false);

        INeu1.setEditable(false);

        INeg1.setEditable(false);

        IPos1.setEditable(false);

        CPos1.setEditable(false);

        CNeu1.setEditable(false);

        CNeg1.setEditable(false);

        Ad1.setEditable(false);

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton1.setText("Compare and Generate Results!");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        SSPos1.setEditable(false);

        ServiceSupport1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        ServiceSupport1.setText("Service and Support");

        SSNeu1.setEditable(false);
        SSNeu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SSNeu1ActionPerformed(evt);
            }
        });

        SSNeg1.setEditable(false);

        Pos2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Pos2.setText("Positive");

        Neu2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Neu2.setText("Neutral");

        Neg2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Neg2.setText("Negative");

        Mention2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Mention2.setText("Mention");

        MPos2.setEditable(false);

        MNeu2.setEditable(false);

        MNeg2.setEditable(false);

        CNeg2.setEditable(false);

        CNeu2.setEditable(false);

        CPos2.setEditable(false);
        CPos2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CPos2ActionPerformed(evt);
            }
        });

        Camera2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Camera2.setText("Camera");

        Features2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Features2.setText("Features");

        Performance6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Performance6.setText("Service and Support");

        Performance2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Performance2.setText("Other Features");

        SSPos2.setEditable(false);

        OFPos2.setEditable(false);

        IPos2.setEditable(false);

        SSNeu2.setEditable(false);
        SSNeu2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SSNeu2ActionPerformed(evt);
            }
        });

        OFNeu2.setEditable(false);

        INeu2.setEditable(false);

        OFNeg2.setEditable(false);

        SSNeg2.setEditable(false);

        Ad2.setEditable(false);

        Advertisement2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Advertisement2.setText("Advertisements");

        Inquiry2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Inquiry2.setText("Inquiry / Questions");

        INeg2.setEditable(false);

        jLabel2.setIcon(new javax.swing.ImageIcon("C:\\Users\\as\\Documents\\NetBeansProjects\\Major\\images\\bird_blue_48.png")); // NOI18N

        jLabel4.setFont(new java.awt.Font("Vijaya", 1, 48)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(102, 102, 255));
        jLabel4.setText("Tweewomt");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 584, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 584, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblTrendingTweets2)
                                .addGap(31, 31, 31)
                                .addComponent(lblTrendingTweetsTopic2, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addGap(175, 175, 175)
                                                    .addComponent(Advertisement2))
                                                .addGroup(layout.createSequentialGroup()
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                            .addGap(85, 85, 85)
                                                            .addComponent(Performance2))
                                                        .addComponent(Inquiry2)
                                                        .addComponent(Performance6))
                                                    .addGap(74, 74, 74)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(SSPos2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                            .addComponent(IPos2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addComponent(OFPos2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                    .addGap(23, 23, 23)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(Ad2, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addComponent(INeu2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addComponent(SSNeu2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addComponent(OFNeu2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(Mention2)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(Features2)
                                                        .addGap(42, 42, 42)
                                                        .addComponent(Camera2)))
                                                .addGap(111, 111, 111)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(MPos2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(CPos2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(Pos2))
                                                .addGap(67, 67, 67)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(CNeu2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(MNeu2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(Neu2))))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(MNeg2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(CNeg2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(OFNeg2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(SSNeg2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(INeg2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(23, 23, 23))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                            .addGap(85, 85, 85)
                                                            .addComponent(OtherFeatures1))
                                                        .addComponent(Inquiry1)
                                                        .addComponent(ServiceSupport1))
                                                    .addGap(74, 74, 74)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(SSPos1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                            .addComponent(IPos1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addComponent(OFPos1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                    .addGap(23, 23, 23)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(Ad1, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addComponent(INeu1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addComponent(OFNeu1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addComponent(SSNeu1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                                .addGroup(layout.createSequentialGroup()
                                                    .addGap(175, 175, 175)
                                                    .addComponent(Advertisement1)))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(Mention1)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(Features1)
                                                        .addGap(42, 42, 42)
                                                        .addComponent(Camera1)))
                                                .addGap(111, 111, 111)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(MPos1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(CPos1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(Pos1))
                                                .addGap(67, 67, 67)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(CNeu1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(MNeu1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(Neu1))))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(40, 40, 40)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(Neg1)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(MNeg1, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                                                        .addComponent(CNeg1, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)))
                                                .addGap(0, 0, Short.MAX_VALUE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(OFNeg1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(SSNeg1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(INeg1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(22, 22, 22))))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Neg2)
                                .addGap(32, 32, 32))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblTrendingTweets1)
                                .addGap(29, 29, 29)
                                .addComponent(lblTrendingTweetsTopic1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(36, 36, 36)
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(42, 42, 42)
                                .addComponent(btnStreamTweets)
                                .addGap(35, 35, 35)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4)))
                        .addGap(68, 68, 68)
                        .addComponent(jButton1)
                        .addGap(49, 49, 49))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnStreamTweets, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTrendingTweetsTopic1, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTrendingTweets1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Pos1)
                    .addComponent(Neu1)
                    .addComponent(Neg1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(MNeu1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(MPos1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(MNeg1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(Mention1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(CNeu1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(CNeg1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(CPos1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(Camera1)
                                        .addComponent(Features1)))))
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(OtherFeatures1)
                            .addComponent(OFPos1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(OFNeu1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(OFNeg1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ServiceSupport1)
                            .addComponent(SSPos1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(SSNeu1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(SSNeg1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(IPos1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Inquiry1)
                            .addComponent(INeu1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(INeg1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Advertisement1)
                            .addComponent(Ad1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Pos2)
                            .addComponent(Neu2)
                            .addComponent(Neg2))
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(MNeu2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(MPos2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(MNeg2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(Mention2))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(45, 45, 45)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(CNeu2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(CNeg2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(CPos2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(Features2))
                                    .addComponent(Camera2))))
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Performance2)
                            .addComponent(OFPos2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(OFNeu2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(OFNeg2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(SSPos2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Performance6)
                            .addComponent(SSNeu2)
                            .addComponent(SSNeg2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(IPos2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Inquiry2)
                            .addComponent(INeu2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(INeg2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Advertisement2)
                            .addComponent(Ad2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(59, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblTrendingTweets2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblTrendingTweetsTopic2, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnStreamTweetsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStreamTweetsActionPerformed
        // TODO add your handling code here:
    MobileSentimentClassifier sentClassifier;  
    MobileTopicClassifier sentClassifier2; 
    int LIMIT= 500; //the number of retrieved tweets  
    ConfigurationBuilder cb;  
    Twitter twitter;   
        cb = new ConfigurationBuilder();  
        cb.setDebugEnabled(true);
        cb.setOAuthConsumerKey("r3LjcqZLjEkgtniB3MJ2G4wZe");
        cb.setOAuthConsumerSecret("GfQjdjQQQHFA4iWq0pdUCm5279EuZ0aUSLmirjbs7fqTyxsLv8");
        cb.setOAuthAccessToken("3557951474-axOpcM4CeRZqfGYmP7elNE7nZ52rSUHI5Rv6mve");
        cb.setOAuthAccessTokenSecret("N1lBfeKZq78pOTToXxh9EwSGvP92bPGLJRrFAwSvdApXo");  
    twitter = new TwitterFactory(cb.build()).getInstance();  
    sentClassifier = new MobileSentimentClassifier();    
    sentClassifier2 = new MobileTopicClassifier();    
 
    int count=0;
    //int compliments=0,complaints=0,
    int advertisement=0;
    int posOtherFeatures=0,negOtherFeatures=0,neuOtherFeatures=0;
    int posMention=0,negMention=0,neuMention=0;
    //int posBattery=0,negBattery=0,neuBattery=0;
    //int posPrice=0,negPrice=0,neuPrice=0;
    int posServiceAndSupport=0,negServiceAndSupport=0,neuServiceAndSupport=0;
    int posCamera=0,negCamera=0,neuCamera=0;
    int posQuest=0,negQuest=0,neuQuest=0;
    
    
   FileOutputStream fout1=null;  
    try {
        fout1 = new FileOutputStream("DatasetConsumer\\Mobile"+brand1+".txt");
    } catch (FileNotFoundException ex) {
        Logger.getLogger(MobileTweetsFormConsumer.class.getName()).log(Level.SEVERE, null, ex);
    }
   BufferedOutputStream bout=new BufferedOutputStream(fout1);  
   
     
    
       Query query = new Query(brand1);  
       query.setCount(100); 
       query.setLang("en");
       QueryResult r = null;
       do {
            
        try {
            r = twitter.search(query); //Returns tweets that match a specified query.
            ArrayList ts= (ArrayList) r.getTweets();
            
            for (int i = 0; i < ts.size() && count != LIMIT; i++) {
                
                Status t = (Status) ts.get(i);
                String text = t.getText();
                if(text.toLowerCase().contains("sale") || text.toLowerCase().contains("case") || text.toLowerCase().contains("free") || text.toLowerCase().contains("win") || text.toLowerCase().contains("sleeves") || text.toLowerCase().contains("sleeve"))
                {
                    String name = t.getUser().getScreenName();
                    txtTrendingTweets1.append(name + " : " + text + "\n" + "Sentiment: Neutral \n Topic: Advertisement");
                    txtTrendingTweets1.append("\n-----------------------------------------------------------------------------------\n");
                    advertisement++;
                    String s= name + " : " + text + "\n Sentiment: Neutral \n Topic: Advertisement \n-----------------------------------------------------------------------------------\n\n";
                    byte b[]=s.getBytes(); 
                    try {
                        bout.write(b);
                    } catch (IOException ex) {
                        Logger.getLogger(MobileTweetsFormConsumer.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    continue;
                }
                count++;
                //System.out.println("Text: " + text);
                String name = t.getUser().getScreenName();
                //System.out.println("User: " + name);
                String sent = sentClassifier.classify(t.getText());
                String topic = sentClassifier2.classify(t.getText());
                //System.out.println("Sentiment: " + sent);
                
                txtTrendingTweets1.append(name + " : " + text + "\n" + "Sentiment:" + sent + "\nTopic:" + topic);
                txtTrendingTweets1.append("\n-----------------------------------------------------------------------------------\n");
                
                String s= name + " : " + text + "\n Sentiment:" + sent + "\nTopic:" + topic + " \n-----------------------------------------------------------------------------------\n\n";
                    byte b[]=s.getBytes(); 
                    try {
                        bout.write(b);
                    } catch (IOException ex) {
                        Logger.getLogger(MobileTweetsFormConsumer.class.getName()).log(Level.SEVERE, null, ex);
                    }
                
                if(sent.equals("Positive") && topic.equals("Mention"))
                    posMention++;
                if(sent.equals("Negative") && topic.equals("Mention"))
                    negMention++;
                if(sent.equals("Neutral") && topic.equals("Mention"))
                    neuMention++;
                
                
                if(sent.equals("Positive") && topic.equals("Camera"))
                    posCamera++;
                if(sent.equals("Negative") && topic.equals("Camera"))
                    negCamera++;
                if(sent.equals("Neutral") && topic.equals("Camera"))
                    neuCamera++;
                
                /*if(sent.equals("Positive") && topic.equals("Battery"))
                    posBattery++;
                if(sent.equals("Negative") && topic.equals("Battery"))
                    negBattery++;
                if(sent.equals("Neutral") && topic.equals("Battery"))
                    neuBattery++;
                
                 if(sent.equals("Positive") && topic.equals("Price"))
                    posPrice++;
                if(sent.equals("Negative") && topic.equals("Price"))
                    negPrice++;
                if(sent.equals("Neutral") && topic.equals("Price"))
                    neuPrice++;
                */
                if(sent.equals("Positive") && topic.equals("ServiceAndSupport"))
                    posServiceAndSupport++;
                if(sent.equals("Negative") && topic.equals("ServiceAndSupport"))
                    negServiceAndSupport++;
                if(sent.equals("Neutral") && topic.equals("ServiceAndSupport"))
                    neuServiceAndSupport++;
                
                  if(sent.equals("Positive") && topic.equals("OtherFeatures"))
                    posOtherFeatures++;
                if(sent.equals("Negative") && topic.equals("OtherFeatures"))
                    negOtherFeatures++;
                if(sent.equals("Neutral") && topic.equals("OtherFeatures"))
                    neuOtherFeatures++;
                
                if(sent.equals("Neutral") && topic.equals("Inquiry"))
                    neuQuest++;
                if(sent.equals("Negative") && topic.equals("Inquiry"))
                    negQuest++;
                if(sent.equals("Positive") && topic.equals("Inquiry"))
                    posQuest++;
                
                
            }
        } catch (TwitterException ex) {
            Logger.getLogger(MobileTweetsFormConsumer.class.getName()).log(Level.SEVERE, null, ex);
        }
       } while (count != LIMIT);  
       //nextQuery():Returns a Query instance to fetch next page or null if there is no next page.
    try {
        //nextQuery():Returns a Query instance to fetch next page or null if there is no next page.
        bout.close();
    } catch (IOException ex) {
        Logger.getLogger(MobileTweetsFormConsumer.class.getName()).log(Level.SEVERE, null, ex);
    }
    System.out.println("Count: " + count);  
       
        MPos1.setText("=" + posMention);
        MNeg1.setText("=" + negMention);
        MNeu1.setText("=" + neuMention);
        
        CPos1.setText("=" + posCamera);
        CNeg1.setText("=" + negCamera);
        CNeu1.setText("=" + neuCamera);
        
        /*BPos1.setText("=" + posBattery);
        BNeg1.setText("=" + negBattery);
        BNeu1.setText("=" + neuBattery);
       
        PPos1.setText("=" + posPrice);
        PNeg1.setText("=" + negPrice);
        PNeu1.setText("=" + neuPrice);
        */
        SSPos1.setText("=" + posServiceAndSupport);
        SSNeg1.setText("=" + negServiceAndSupport);
        SSNeu1.setText("=" + neuServiceAndSupport);
        
        OFPos1.setText("=" + posOtherFeatures);
        OFNeg1.setText("=" + negOtherFeatures);
        OFNeu1.setText("=" + neuOtherFeatures);
        
        IPos1.setText("=" + posQuest);
        INeg1.setText("=" + negQuest);
        INeu1.setText("=" + neuQuest);
        
        
        Ad1.setText("=" + advertisement);
        
        totalpos1=posServiceAndSupport + posQuest + posOtherFeatures + posCamera + posMention;
        totalneg1=negServiceAndSupport + negQuest + negOtherFeatures + negCamera + negMention;
        totalneu1=neuServiceAndSupport + neuQuest + neuOtherFeatures + neuCamera + neuMention;
        
        System.out.println("Positive1=" + totalpos1);
        System.out.println("Negative1=" + totalneg1);
        System.out.println("Neutral1=" + totalneu1);
             FileOutputStream fout3=null;  
    
        try {
        fout3 = new FileOutputStream("DatasetConsumer\\Mobile"+brand1+"Sentiments.txt");
    } catch (FileNotFoundException ex) {
        Logger.getLogger(MobileTweetsFormConsumer.class.getName()).log(Level.SEVERE, null, ex);
    }
   BufferedOutputStream bout3=new BufferedOutputStream(fout3);  
   
    String sT= " Positive: " + totalpos1 + " \n Negative: " + totalneg1 + " \n Neutral: " + totalneu1;
    byte bT[]=sT.getBytes(); 
    try {
        bout3.write(bT);
        bout3.close();
    } catch (IOException ex) {
        Logger.getLogger(MobileTweetsFormConsumer.class.getName()).log(Level.SEVERE, null, ex);
    }
         if(posCamera==0 && negCamera==0)
            CameraPolarity1=(float)neuCamera;
         
        else  if(posCamera>=negCamera && negCamera!=0)
            CameraPolarity1=((float)posCamera)/(negCamera+neuCamera);
        else if(posCamera>=negCamera &&  negCamera==0)
            CameraPolarity1=(float)posCamera;
        else if(posCamera<negCamera && posCamera!=0)
            CameraPolarity1= -1*(((float)negCamera)/(posCamera+neuCamera));
        else
            CameraPolarity1=-1*(float)negCamera;
        
        if(posMention==0 && negMention==0)
            MentionPolarity1=(float)neuMention;
        else if(posMention>=negMention && negMention!=0)
            MentionPolarity1=((float)posMention)/(negMention+neuMention);
        
        else if(posMention>=negMention && negMention==0)
            MentionPolarity1=(float)posMention;
        else if(posMention<negMention && posMention!=0)
            MentionPolarity1= -1*(((float)negMention)/(posMention+neuMention));
        else
            MentionPolarity1= -1*(float)negMention;
         
        if(posServiceAndSupport==0 && negServiceAndSupport==0)
            ServiceAndSupportPolarity1=(float)neuServiceAndSupport;
        else if(posServiceAndSupport>=negServiceAndSupport && negServiceAndSupport!=0)
            ServiceAndSupportPolarity1=((float)posServiceAndSupport)/(negServiceAndSupport+neuServiceAndSupport);
        else if(posServiceAndSupport>=negServiceAndSupport && negServiceAndSupport==0)
            ServiceAndSupportPolarity1=(float)posServiceAndSupport;
        else if(posServiceAndSupport<negServiceAndSupport && posServiceAndSupport!=0)
            ServiceAndSupportPolarity1=-1*(((float)negServiceAndSupport)/(posServiceAndSupport+neuServiceAndSupport));
        else
            ServiceAndSupportPolarity1=-1*(float)negServiceAndSupport;
            
        
        if(posQuest==0 && negQuest==0)
            QuestPolarity1=(float)neuQuest;
        else if(posQuest>=negQuest && negQuest!=0)
            QuestPolarity1=((float)posQuest)/(negQuest+neuQuest);
         else if(posQuest>=negQuest && negQuest==0)
             QuestPolarity1=(float)posQuest;
         else if(posQuest<negQuest && posQuest!=0)
            QuestPolarity1= -1*(((float)negQuest)/(posQuest+neuQuest));
         else
             QuestPolarity1=-1*(float)negQuest;
          
        if(posOtherFeatures==0 && negOtherFeatures==0)
            OtherFeaturesPolarity1=(float)neuOtherFeatures;
        else if(posOtherFeatures>=negOtherFeatures && negOtherFeatures !=0)
            OtherFeaturesPolarity1=((float)posOtherFeatures) /(negOtherFeatures +neuOtherFeatures );
         else if(posOtherFeatures>=negOtherFeatures && negOtherFeatures ==0)
             OtherFeaturesPolarity1=(float)posOtherFeatures;
         else if(posOtherFeatures <negOtherFeatures  && posOtherFeatures !=0)
            OtherFeaturesPolarity1= -1*(((float)negOtherFeatures )/(posOtherFeatures +neuOtherFeatures ));
         else
            OtherFeaturesPolarity1=-1*(float)negOtherFeatures ;
          
         
        if(CameraPolarity1>0)
          CameraPolarity1/=LIMIT;
        if(MentionPolarity1>0)
        MentionPolarity1/=LIMIT;
        if(ServiceAndSupportPolarity1>0)
        ServiceAndSupportPolarity1/=LIMIT;
         if(QuestPolarity1>0)
             QuestPolarity1/=LIMIT;
        if(OtherFeaturesPolarity1>0)
               OtherFeaturesPolarity1/=LIMIT;
    
       
   FileOutputStream fout2=null;  
    try {
        fout2 = new FileOutputStream("DatasetConsumer\\Mobile"+brand2+".txt");
                
    } catch (FileNotFoundException ex) {
        Logger.getLogger(MobileTweetsFormConsumer.class.getName()).log(Level.SEVERE, null, ex);
    }
   BufferedOutputStream bout2=new BufferedOutputStream(fout2);  
        
       int count2=0;
    //int compliments=0,complaints=0,
    int advertisement2=0;
    int posOtherFeatures2=0,negOtherFeatures2=0,neuOtherFeatures2=0;
    int posMention2=0,negMention2=0,neuMention2=0;
   // int posBattery2=0,negBattery2=0,neuBattery2=0;
   // int posPrice2=0,negPrice2=0,neuPrice2=0;
    int posServiceAndSupport2=0,negServiceAndSupport2=0,neuServiceAndSupport2=0;
    int posCamera2=0,negCamera2=0,neuCamera2=0;
    int posQuest2=0,negQuest2=0,neuQuest2=0;
    
  
       Query query2 = new Query(brand2);  
       query2.setCount(100); 
       query2.setLang("en");
       QueryResult r2 = null;
       do {
            
        try {
            r2 = twitter.search(query2); //Returns tweets that match a specified query.
            ArrayList ts2= (ArrayList) r2.getTweets();
            
            for (int i = 0; i < ts2.size() && count2 != LIMIT; i++) {
                
                Status t2 = (Status) ts2.get(i);
                String text2 = t2.getText();
                if(text2.toLowerCase().contains("sale") || text2.toLowerCase().contains("case") || text2.toLowerCase().contains("free") || text2.toLowerCase().contains("win") || text2.toLowerCase().contains("sleeves") || text2.toLowerCase().contains("sleeve"))
                {
                    String name2 = t2.getUser().getScreenName();
                    txtTrendingTweets2.append(name2 + " : " + text2 + "\n" + "Sentiment: Neutral \n Topic: Advertisement");
                    txtTrendingTweets2.append("\n-----------------------------------------------------------------------------------\n");
                    advertisement2++;
                      String s= name2 + " : " + text2 + "\n" + "Sentiment: Neutral \n Topic: Advertisement \n-----------------------------------------------------------------------------------\n\n";
                    byte b[]=s.getBytes(); 
                    try {
                        bout2.write(b);
                    } catch (IOException ex) {
                        Logger.getLogger(MobileTweetsFormConsumer.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    continue;
                }
                count2++;
                //System.out.println("Text: " + text);
                String name2 = t2.getUser().getScreenName();
                //System.out.println("User: " + name);
                String sent2 = sentClassifier.classify(t2.getText());
                String topic2 = sentClassifier2.classify(t2.getText());
                //System.out.println("Sentiment: " + sent);
                
                txtTrendingTweets2.append(name2 + " : " + text2 + "\n" + "Sentiment:" + sent2 + "\nTopic:" + topic2);
                txtTrendingTweets2.append("\n-----------------------------------------------------------------------------------\n");
                
                 String s= name2 + " : " + text2 + "\n" + "Sentiment:" + sent2 + "\nTopic:" + topic2 + " \n-----------------------------------------------------------------------------------\n\n";
                    byte b[]=s.getBytes(); 
                    try {
                        bout2.write(b);
                    } catch (IOException ex) {
                        Logger.getLogger(MobileTweetsFormConsumer.class.getName()).log(Level.SEVERE, null, ex);
                    }
                
                
                if(sent2.equals("Positive") && topic2.equals("Mention"))
                    posMention2++;
                if(sent2.equals("Negative") && topic2.equals("Mention"))
                    negMention2++;
                if(sent2.equals("Neutral") && topic2.equals("Mention"))
                    neuMention2++;
                
                
                if(sent2.equals("Positive") && topic2.equals("Camera"))
                    posCamera2++;
                if(sent2.equals("Negative") && topic2.equals("Camera"))
                    negCamera2++;
                if(sent2.equals("Neutral") && topic2.equals("Camera"))
                    neuCamera2++;
                
                /*if(sent2.equals("Positive") && topic2.equals("Battery"))
                    posBattery2++;
                if(sent2.equals("Negative") && topic2.equals("Battery"))
                    negBattery2++;
                if(sent2.equals("Neutral") && topic2.equals("Battery"))
                    neuBattery2++;
                
                 if(sent2.equals("Positive") && topic2.equals("Price"))
                    posPrice2++;
                if(sent2.equals("Negative") && topic2.equals("Price"))
                    negPrice2++;
                if(sent2.equals("Neutral") && topic2.equals("Price"))
                    neuPrice2++;
                */
                if(sent2.equals("Positive") && topic2.equals("ServiceAndSupport"))
                    posServiceAndSupport2++;
                if(sent2.equals("Negative") && topic2.equals("ServiceAndSupport"))
                    negServiceAndSupport2++;
                if(sent2.equals("Neutral") && topic2.equals("ServiceAndSupport"))
                    neuServiceAndSupport2++;
                
                  if(sent2.equals("Positive") && topic2.equals("OtherFeatures"))
                    posOtherFeatures2++;
                if(sent2.equals("Negative") && topic2.equals("OtherFeatures"))
                    negOtherFeatures2++;
                if(sent2.equals("Neutral") && topic2.equals("OtherFeatures"))
                    neuOtherFeatures2++;
                
                if(sent2.equals("Neutral") && topic2.equals("Inquiry"))
                    neuQuest2++;
                if(sent2.equals("Negative") && topic2.equals("Inquiry"))
                    negQuest2++;
                if(sent2.equals("Positive") && topic2.equals("Inquiry"))
                    posQuest2++;
                
                
            }
        } catch (TwitterException ex) {
            Logger.getLogger(MobileTweetsFormConsumer.class.getName()).log(Level.SEVERE, null, ex);
        }
       } while (count2 != LIMIT);  
       //nextQuery():Returns a Query instance to fetch next page or null if there is no next page.
    try {
        //nextQuery():Returns a Query instance to fetch next page or null if there is no next page.
        bout2.close();
    } catch (IOException ex) {
        Logger.getLogger(MobileTweetsFormConsumer.class.getName()).log(Level.SEVERE, null, ex);
    }
    System.out.println("Count: " + count2);  
       
        MPos2.setText("=" + posMention2);
        MNeg2.setText("=" + negMention2);
        MNeu2.setText("=" + neuMention2);
        
        CPos2.setText("=" + posCamera2);
        CNeg2.setText("=" + negCamera2);
        CNeu2.setText("=" + neuCamera2);
        
        /*BPos2.setText("=" + posBattery2);
        BNeg2.setText("=" + negBattery2);
        BNeu2.setText("=" + neuBattery2);
        
        PPos2.setText("=" + posPrice2);
        PNeg2.setText("=" + negPrice2);
        PNeu2.setText("=" + neuPrice2);
        */
        SSPos2.setText("=" + posServiceAndSupport2);
        SSNeg2.setText("=" + negServiceAndSupport2);
        SSNeu2.setText("=" + neuServiceAndSupport2);
        
        OFPos2.setText("=" + posOtherFeatures2);
        OFNeg2.setText("=" + negOtherFeatures2);
        OFNeu2.setText("=" + neuOtherFeatures2);
        
        IPos2.setText("=" + posQuest2);
        INeg2.setText("=" + negQuest2);
        INeu2.setText("=" + neuQuest2);
        
        
        Ad2.setText("=" + advertisement2);
        
        totalpos2=posServiceAndSupport2 + posQuest2 + posOtherFeatures2 + posCamera2 + posMention2;
        totalneg2=negServiceAndSupport2 + negQuest2 + negOtherFeatures2 + negCamera2 + negMention2;
        totalneu2=neuServiceAndSupport2 + neuQuest2 + neuOtherFeatures2 + neuCamera2 + neuMention2;
        
        System.out.println("Positive2=" + totalpos2);
        System.out.println("Negative2=" + totalneg2);
        System.out.println("Neutral2=" + totalneu2);
      FileOutputStream fout4=null;  
    
        try {
        fout4 = new FileOutputStream("DatasetConsumer\\Mobile"+brand2+"Sentiments.txt");
    } catch (FileNotFoundException ex) {
        Logger.getLogger(MobileTweetsFormConsumer.class.getName()).log(Level.SEVERE, null, ex);
    }
   BufferedOutputStream bout4=new BufferedOutputStream(fout4);  
   
    String s2= " Positive: " + totalpos2 + " \n Negative: " + totalneg2 + " \n Neutral: " + totalneu2;
    byte b2[]=s2.getBytes(); 
    try {
        bout4.write(b2);
        bout4.close();
    } catch (IOException ex) {
        Logger.getLogger(MobileTweetsFormConsumer.class.getName()).log(Level.SEVERE, null, ex);
    }
        
        if(posCamera2==0 && negCamera2==0)
            CameraPolarity2=(float)neuCamera2;
        else  if(posCamera2>=negCamera2 && negCamera2!=0)
            CameraPolarity2=((float)posCamera2)/(negCamera2+neuCamera2);
        else if(posCamera2>=negCamera2 && negCamera2==0)
            CameraPolarity2=(float)posCamera2;
        else if(posCamera2<negCamera2 && posCamera2!=0)
            CameraPolarity2= -1*(((float)negCamera2)/(posCamera2+neuCamera2));
        else
            CameraPolarity2=-1*(float)negCamera2;
        
        if(posMention2==0 && negMention2==0)
            MentionPolarity2=(float)neuMention2;
        else if(posMention2>=negMention2 && negMention2!=0)
            MentionPolarity2=((float)posMention2)/(negMention2+neuMention2);
        else if(posMention2>=negMention2 &&  negMention2==0)
            MentionPolarity2=(float)posMention2;
        else if(posMention2<negMention2 && posMention2!=0)
            MentionPolarity2= -1*(((float)negMention2)/(posMention2+neuMention2));
        else
            MentionPolarity2= -1*(float)negMention2;
         
        if(posServiceAndSupport2==0 && negServiceAndSupport2==0)
            ServiceAndSupportPolarity2=(float)neuServiceAndSupport2;
        else if(posServiceAndSupport2>=negServiceAndSupport2 && negServiceAndSupport2!=0)
            ServiceAndSupportPolarity2=((float)posServiceAndSupport2)/(negServiceAndSupport2+neuServiceAndSupport2);
        else if(posServiceAndSupport2>=negServiceAndSupport2 && negServiceAndSupport2==0)
            ServiceAndSupportPolarity2=(float)posServiceAndSupport2;
        else if(posServiceAndSupport2<negServiceAndSupport2 && posServiceAndSupport2!=0)
            ServiceAndSupportPolarity2=-1*(((float)negServiceAndSupport2)/(posServiceAndSupport2+neuServiceAndSupport2));
        
        else
            ServiceAndSupportPolarity2=-1*(float)negServiceAndSupport2;
            
        
        if(posQuest2==0 && negQuest2==0)
            QuestPolarity2=(float)neuQuest2;
        else if(posQuest2>=negQuest2 && negQuest2!=0)
            QuestPolarity2=((float)posQuest2)/(negQuest2+neuQuest2);
         else if(posQuest2>=negQuest2 && negQuest2==0)
             QuestPolarity2=(float)posQuest2;
         else if(posQuest2<negQuest2 && posQuest2!=0)
            QuestPolarity2= -1*(((float)negQuest2)/(posQuest2+neuQuest2));
         else
             QuestPolarity2=-1*(float)negQuest2;
          
        if(posOtherFeatures2==0 && negOtherFeatures2==0)
            OtherFeaturesPolarity2=(float)neuOtherFeatures2;
        else if(posOtherFeatures2>=negOtherFeatures2 && negOtherFeatures2 !=0)
            OtherFeaturesPolarity2=((float)posOtherFeatures2) /(negOtherFeatures2 +neuOtherFeatures2 );
         else if(posOtherFeatures2>=negOtherFeatures2 && negOtherFeatures2 ==0)
             OtherFeaturesPolarity2=(float)posOtherFeatures2;
         else if(posOtherFeatures2 <negOtherFeatures2  && posOtherFeatures2 !=0)
            OtherFeaturesPolarity2= -1*(((float)negOtherFeatures2 )/(posOtherFeatures2 +neuOtherFeatures2 ));
         else
            OtherFeaturesPolarity2=-1*(float)negOtherFeatures2 ;
         
        /* CameraPolarity2/=posCamera2+negCamera2+neuCamera2;
         MentionPolarity2/=posMention2+negMention2+neuMention2;
         ServiceAndSupportPolarity2/=posServiceAndSupport2+negServiceAndSupport2+neuServiceAndSupport2;
         QuestPolarity2/=posQuest2+negQuest2+neuQuest2;
         OtherFeaturesPolarity2/=posOtherFeatures2+negOtherFeatures2+neuOtherFeatures2;
        */
        
        if(CameraPolarity2>0)
          CameraPolarity2/=LIMIT;
        if(MentionPolarity2>0)
        MentionPolarity2/=LIMIT;
        if(ServiceAndSupportPolarity2>0)
        ServiceAndSupportPolarity2/=LIMIT;
         if(QuestPolarity2>0)
             QuestPolarity2/=LIMIT;
        if(OtherFeaturesPolarity2>0)
               OtherFeaturesPolarity2/=LIMIT;
    
         
   
    
    }//GEN-LAST:event_btnStreamTweetsActionPerformed

    private void lblTrendingTweetsTopic2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lblTrendingTweetsTopic2ActionPerformed
        // TODO add your handling code here:
        lblTrendingTweetsTopic2.setText(brand2);
    }//GEN-LAST:event_lblTrendingTweetsTopic2ActionPerformed

    private void lblTrendingTweetsTopic1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lblTrendingTweetsTopic1ActionPerformed
        // TODO add your handling code here:
                lblTrendingTweetsTopic1.setText(brand1);

    }//GEN-LAST:event_lblTrendingTweetsTopic1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
        
        jTextField1.setText(brand1);
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
          jTextField2.setText(brand2);
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void SSNeu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SSNeu1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SSNeu1ActionPerformed

    private void SSNeu2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SSNeu2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SSNeu2ActionPerformed

    private void CPos2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CPos2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CPos2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        
        MobileResultformConsumer f=new MobileResultformConsumer(brand1,brand2,CameraPolarity1,ServiceAndSupportPolarity1,QuestPolarity1,OtherFeaturesPolarity1,MentionPolarity1,
       CameraPolarity2,ServiceAndSupportPolarity2,QuestPolarity2,OtherFeaturesPolarity2,MentionPolarity2);
        f.setVisible(true);
        
        
        CreateChart cc1=new CreateChart("MAJOR",brand1,totalpos1,totalneg1,totalneu1);
        cc1.pack();
        //cc1.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        cc1.setVisible(true);
        
        CreateChart cc2=new CreateChart("MAJOR",brand2,totalpos2,totalneg2,totalneu2);
        cc2.pack();
        //cc2.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        cc2.setVisible(true);
        
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void MPos1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MPos1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MPos1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MobileTweetsFormConsumer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MobileTweetsFormConsumer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MobileTweetsFormConsumer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MobileTweetsFormConsumer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
               // new MobileTweetsFormConsumer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Ad1;
    private javax.swing.JTextField Ad2;
    private javax.swing.JLabel Advertisement1;
    private javax.swing.JLabel Advertisement2;
    private javax.swing.JTextField CNeg1;
    private javax.swing.JTextField CNeg2;
    private javax.swing.JTextField CNeu1;
    private javax.swing.JTextField CNeu2;
    private javax.swing.JTextField CPos1;
    private javax.swing.JTextField CPos2;
    private javax.swing.JLabel Camera1;
    private javax.swing.JLabel Camera2;
    private javax.swing.JLabel Features1;
    private javax.swing.JLabel Features2;
    private javax.swing.JTextField INeg1;
    private javax.swing.JTextField INeg2;
    private javax.swing.JTextField INeu1;
    private javax.swing.JTextField INeu2;
    private javax.swing.JTextField IPos1;
    private javax.swing.JTextField IPos2;
    private javax.swing.JLabel Inquiry1;
    private javax.swing.JLabel Inquiry2;
    private javax.swing.JTextField MNeg1;
    private javax.swing.JTextField MNeg2;
    private javax.swing.JTextField MNeu1;
    private javax.swing.JTextField MNeu2;
    private javax.swing.JTextField MPos1;
    private javax.swing.JTextField MPos2;
    private javax.swing.JLabel Mention1;
    private javax.swing.JLabel Mention2;
    private javax.swing.JLabel Neg1;
    private javax.swing.JLabel Neg2;
    private javax.swing.JLabel Neu1;
    private javax.swing.JLabel Neu2;
    private javax.swing.JTextField OFNeg1;
    private javax.swing.JTextField OFNeg2;
    private javax.swing.JTextField OFNeu1;
    private javax.swing.JTextField OFNeu2;
    private javax.swing.JTextField OFPos1;
    private javax.swing.JTextField OFPos2;
    private javax.swing.JLabel OtherFeatures1;
    private javax.swing.JLabel Performance2;
    private javax.swing.JLabel Performance6;
    private javax.swing.JLabel Pos1;
    private javax.swing.JLabel Pos2;
    private javax.swing.JTextField SSNeg1;
    private javax.swing.JTextField SSNeg2;
    private javax.swing.JTextField SSNeu1;
    private javax.swing.JTextField SSNeu2;
    private javax.swing.JTextField SSPos1;
    private javax.swing.JTextField SSPos2;
    private javax.swing.JLabel ServiceSupport1;
    private javax.swing.JButton btnStreamTweets;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JLabel lblTrendingTweets1;
    private javax.swing.JLabel lblTrendingTweets2;
    private javax.swing.JTextField lblTrendingTweetsTopic1;
    private javax.swing.JTextField lblTrendingTweetsTopic2;
    private javax.swing.JTextArea txtTrendingTweets1;
    private javax.swing.JTextArea txtTrendingTweets2;
    // End of variables declaration//GEN-END:variables
}
